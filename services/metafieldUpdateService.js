/**
 * Metafield Update Service
 * Force updates metafields on bundle products
 */

const axios = require('axios');

class MetafieldUpdateService {
  constructor() {
    this.baseURL = `https://${process.env.SHOPIFY_STORE_DOMAIN}/admin/api/2023-10`;
    this.accessToken = process.env.SHOPIFY_ACCESS_TOKEN;
    this.headers = {
      'X-Shopify-Access-Token': this.accessToken,
      'Content-Type': 'application/json'
    };
  }

  /**
   * Force update bundle metafields on a product
   */
  async forceUpdateBundleMetafields(productId) {
    try {
      console.log(`ðŸ”„ Force updating metafields for product ${productId}...`);
      
      // Get the product first
      const productResponse = await axios.get(
        `${this.baseURL}/products/${productId}.json`,
        { headers: this.headers }
      );
      
      const product = productResponse.data.product;
      console.log(`Product: ${product.title}`);
      
      // Get component products
      const componentProducts = [
        {
          id: 8157903552706,
          handle: 'debina-bonnerjee-stripe-technicolour-coord-top',
          title: '(@Debina Bonnerjee) Stripe Technicolour Coord Top',
          price: '2499.00',
          image: product.images[0]?.src || null,
          componentType: 'Top',
          variants: [
            { id: 44032498516162, title: 'XS', price: '2499.00' },
            { id: 44032498548930, title: 'S', price: '2499.00' },
            { id: 44032498581698, title: 'M', price: '2499.00' },
            { id: 44032498614466, title: 'L', price: '2499.00' },
            { id: 44032498647234, title: 'XL', price: '2499.00' },
            { id: 44032498680002, title: 'XXL', price: '2499.00' }
          ]
        },
        {
          id: 8157903716546,
          handle: 'debina-bonnerjee-stripe-technicolour-coord-bottom',
          title: '(@Debina Bonnerjee) Stripe Technicolour Coord Bottom',
          price: '3500.00',
          image: product.images[1]?.src || null,
          componentType: 'Bottom',
          variants: [
            { id: 44032498843842, title: 'XS', price: '3500.00' },
            { id: 44032498876610, title: 'S', price: '3500.00' },
            { id: 44032498909378, title: 'M', price: '3500.00' },
            { id: 44032498942146, title: 'L', price: '3500.00' },
            { id: 44032498974914, title: 'XL', price: '3500.00' },
            { id: 44032499007682, title: 'XXL', price: '3500.00' }
          ]
        }
      ];
      
      // Create metafields
      const metafields = [
        {
          namespace: 'bundle_app',
          key: 'is_bundle',
          value: 'true',
          type: 'single_line_text_field'
        },
        {
          namespace: 'bundle_app',
          key: 'component_products',
          value: JSON.stringify(componentProducts),
          type: 'json'
        },
        {
          namespace: 'bundle_app',
          key: 'bundle_config',
          value: JSON.stringify({
            originalProductId: productId,
            originalProductTitle: product.title,
            isAutoGeneratedSet: true,
            displayAsBundle: true,
            cartTransform: {
              enabled: true,
              synchronizeVariants: true
            },
            bundleProducts: componentProducts.map(cp => ({
              id: cp.id,
              title: cp.title,
              quantity: 1,
              componentType: cp.componentType,
              price: cp.price
            }))
          }),
          type: 'json'
        },
        {
          namespace: 'bundle_app',
          key: 'cart_transform_config',
          value: JSON.stringify({
            enabled: true,
            bundleItems: componentProducts.map(cp => ({
              productId: cp.id,
              quantity: 1,
              autoSelect: true
            })),
            variantSync: true,
            hideSubVariants: true
          }),
          type: 'json'
        }
      ];
      
      // Update each metafield
      for (const metafield of metafields) {
        try {
          const response = await axios.post(
            `${this.baseURL}/products/${productId}/metafields.json`,
            { metafield },
            { headers: this.headers }
          );
          console.log(`âœ… Updated metafield: ${metafield.key}`);
        } catch (error) {
          console.error(`Error updating metafield ${metafield.key}:`, error.response?.data || error.message);
        }
      }
      
      console.log('âœ… Metafields force updated successfully');
      return { success: true };
      
    } catch (error) {
      console.error('Error force updating metafields:', error);
      throw error;
    }
  }
}

module.exports = new MetafieldUpdateService();
