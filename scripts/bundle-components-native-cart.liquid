{% comment %}
  Bundle Components Display Section - Native Cart Integration
  Adds individual component products to cart without hijacking cart functionality
{% endcomment %}

{% if product.metafields.bundle_app.is_bundle %}
  <style>
    /* Bundle components styling - simplified */
    .bundle-components-wrapper {
      margin: 20px 0;
      position: relative;
      z-index: 10;
    }
    
    .bundle-product-container {
      display: flex;
      align-items: flex-start;
      gap: 20px;
      margin-bottom: 15px;
      padding: 15px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #fafafa;
    }
    
    .bundle-product-image {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      overflow: hidden;
      flex-shrink: 0;
      border: 1px solid #ddd;
    }
    
    .bundle-product-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .bundle-product-info {
      flex-grow: 1;
    }
    
    .bundle-product-title {
      font-size: 16px;
      font-weight: 600;
      color: #333;
      margin-bottom: 8px;
      line-height: 1.4;
    }
    
    .bundle-product-price {
      font-size: 14px;
      color: #666;
      font-weight: 500;
    }
    
    /* Hide original variant selector when bundle is active */
    .bundle-active .product-form__input {
      display: none !important;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .bundle-product-container {
        flex-direction: column;
        gap: 15px;
      }
      
      .bundle-product-image {
        width: 60px;
        height: 60px;
        align-self: center;
      }
    }
  </style>
  
  <!-- Direct HTML rendering for immediate display -->
  {% if product.id == 8157894312130 %}
    <div class="bundle-components-wrapper" id="bundle-components-display" data-product-id="{{ product.id }}">
      <!-- White Chikan Top -->
      <div class="bundle-product-container" data-component-id="8157903552706" data-component-index="0">
        <div class="bundle-product-image">
          <img src="https://cdn.shopify.com/s/files/1/0520/2355/8338/files/CurlyTales-White-Chikan-Set-1.jpg?v=1742154098" alt="White Chikan Top" loading="lazy">
        </div>
        <div class="bundle-product-info">
          <div class="bundle-product-title">White Chikan Top</div>
          <div class="bundle-product-price">Rs. 2,400.00</div>
        </div>
      </div>
      
      <!-- White Chikan Bottom -->
      <div class="bundle-product-container" data-component-id="8157903716546" data-component-index="1">
        <div class="bundle-product-image">
          <img src="https://cdn.shopify.com/s/files/1/0520/2355/8338/files/CurlyTales-White-Chikan-Set-2.jpg?v=1742154100" alt="White Chikan Bottom" loading="lazy">
        </div>
        <div class="bundle-product-info">
          <div class="bundle-product-title">White Chikan Bottom</div>
          <div class="bundle-product-price">Rs. 2,400.00</div>
        </div>
      </div>
    </div>
  {% endif %}
  
  <script>
    (function() {
      const PRODUCT_ID = {{ product.id }};
      
      console.log('Bundle section loaded for product:', PRODUCT_ID);
      
      // Component products with their actual variant IDs
      const COMPONENT_PRODUCTS = {
        8157894312130: [ // CurlyTales White Chikan Set
          {
            id: 8157903552706,
            handle: 'curlytales-white-chikan-for-test-top',
            title: 'White Chikan Top',
            price: '2400.00',
            componentType: 'Top',
            variants: {
              'S': 44032498516162,
              'M': 44032498548930,
              'L': 44032498581698,
              'XL': 44032498614466,
              'XXL': 44032498647234
            }
          },
          {
            id: 8157903716546,
            handle: 'curlytales-white-chikan-for-test-bottom',
            title: 'White Chikan Bottom',
            price: '2400.00',
            componentType: 'Bottom',
            variants: {
              'S': 44032498843842,
              'M': 44032498876610,
              'L': 44032498909378,
              'XL': 44032498942146,
              'XXL': 44032498974914
            }
          }
        ]
      };
      
      // Wait for DOM to be ready
      function initBundleComponents() {
        // Try to move bundle components to optimal position
        const bundleWrapper = document.getElementById('bundle-components-display');
        if (bundleWrapper) {
          moveBundleComponentsToTop(bundleWrapper);
        }
        
        // Add class to product form to hide original selectors
        const productForm = document.querySelector('.product__info');
        if (productForm) {
          productForm.classList.add('bundle-active');
        }
        
        // Setup native cart integration
        setupNativeCartIntegration();
        
        console.log('Bundle components initialized for product', PRODUCT_ID);
      }
      
      function moveBundleComponentsToTop(bundleWrapper) {
        const possibleTargets = [
          '[data-section-container]',
          '.product__info',
          '.product-form',
          'main[role="main"]',
          '#MainContent',
          '.main-content'
        ];
        
        let targetElement = null;
        for (let selector of possibleTargets) {
          targetElement = document.querySelector(selector);
          if (targetElement) {
            console.log('Found target element:', selector);
            break;
          }
        }
        
        if (targetElement) {
          bundleWrapper.remove();
          targetElement.parentNode.insertBefore(bundleWrapper, targetElement);
          console.log('Bundle components moved above target element');
        }
      }
      
      function getSelectedVariant() {
        let selectedSize = 'S'; // Default fallback
        
        // Method 1: Check active product option
        const activeOption = document.querySelector('.product-options__value.active');
        if (activeOption) {
          const dataValue = activeOption.getAttribute('data-value');
          const textContent = activeOption.textContent.trim();
          selectedSize = (dataValue || textContent).toUpperCase();
          console.log('Active option detected:', selectedSize);
          return selectedSize;
        }
        
        // Method 2: Check URL for variant parameter
        const urlParams = new URLSearchParams(window.location.search);
        const variantFromUrl = urlParams.get('variant');
        if (variantFromUrl) {
          // Map variant ID to size for CurlyTales product
          const variantMappings = {
            '45525425881282': 'S',
            '45525425914050': 'M', 
            '45525425946818': 'L',
            '45525425979586': 'XL',
            '45525426012354': 'XXL'
          };
          selectedSize = variantMappings[variantFromUrl] || 'S';
          console.log('Variant from URL:', variantFromUrl, 'mapped to size:', selectedSize);
          return selectedSize;
        }
        
        // Method 3: Check form inputs
        const formInputs = document.querySelectorAll('input[name="id"], select[name="id"]');
        formInputs.forEach(function(input) {
          if ((input.type === 'radio' && input.checked) || input.tagName === 'SELECT') {
            const value = input.value;
            const variantMappings = {
              '45525425881282': 'S',
              '45525425914050': 'M', 
              '45525425946818': 'L',
              '45525425979586': 'XL',
              '45525426012354': 'XXL'
            };
            if (variantMappings[value]) {
              selectedSize = variantMappings[value];
              console.log('Form input variant:', value, 'mapped to size:', selectedSize);
            }
          }
        });
        
        console.log('Final selected size:', selectedSize);
        return selectedSize;
      }
      
      function setupNativeCartIntegration() {
        function handleBundleCartSubmit(e) {
          e.preventDefault();
          e.stopPropagation();
          
          console.log('Bundle cart submit triggered');
          
          // Get selected size
          const selectedSize = getSelectedVariant();
          console.log('Selected size for cart:', selectedSize);
          
          // Get component products for this bundle
          const componentProducts = COMPONENT_PRODUCTS[PRODUCT_ID];
          if (!componentProducts || componentProducts.length === 0) {
            console.error('No component products found for product:', PRODUCT_ID);
            alert('Bundle configuration error. Please contact support.');
            return;
          }
          
          // Build individual cart items for each component
          const cartItems = [];
          componentProducts.forEach(function(component) {
            const variantId = component.variants[selectedSize];
            if (variantId) {
              cartItems.push({
                id: parseInt(variantId),
                quantity: 1,
                properties: {
                  '_bundle_product': 'true',
                  '_bundle_id': PRODUCT_ID.toString(),
                  '_bundle_component': component.componentType,
                  '_bundle_size': selectedSize,
                  '_component_title': component.title
                }
              });
            }
          });
          
          if (cartItems.length === 0) {
            console.error('No valid component variants found for size:', selectedSize);
            alert('Selected size is not available. Please try a different size.');
            return;
          }
          
          console.log('Adding individual component items to cart:', cartItems);
          
          // Disable submit buttons temporarily
          const submitButtons = document.querySelectorAll('button[name="add"], input[type="submit"][name="add"], .product-form__submit');
          const originalTexts = [];
          submitButtons.forEach(function(btn, index) {
            originalTexts[index] = btn.textContent || btn.value;
            btn.disabled = true;
            if (btn.textContent) {
              btn.textContent = 'Adding Bundle...';
            } else {
              btn.value = 'Adding Bundle...';
            }
          });
          
          // Add items to cart using native Shopify cart API
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ items: cartItems })
          })
          .then(function(response) {
            console.log('Cart response status:', response.status);
            if (!response.ok) {
              return response.text().then(function(text) {
                let errorMessage = 'Failed to add items to cart';
                try {
                  const errorData = JSON.parse(text);
                  if (errorData.message) {
                    errorMessage = errorData.message;
                  } else if (errorData.description) {
                    errorMessage = errorData.description;
                  }
                } catch (e) {
                  if (text) {
                    errorMessage = text;
                  }
                }
                throw new Error(errorMessage);
              });
            }
            return response.json();
          })
          .then(function(data) {
            console.log('Successfully added bundle components to cart:', data);
            
            // Show success message
            submitButtons.forEach(function(btn) {
              if (btn.textContent) {
                btn.textContent = 'Added to Cart!';
              } else {
                btn.value = 'Added to Cart!';
              }
            });
            
            // Trigger cart update events for cart apps
            triggerCartUpdateEvents();
            
            // Re-enable buttons after short delay
            setTimeout(function() {
              submitButtons.forEach(function(btn, index) {
                btn.disabled = false;
                if (btn.textContent) {
                  btn.textContent = originalTexts[index];
                } else {
                  btn.value = originalTexts[index];
                }
              });
            }, 2000);
          })
          .catch(function(error) {
            console.error('Cart error:', error);
            
            // Show specific error message
            let userMessage = 'Failed to add bundle to cart.';
            if (error.message.includes('sold out') || error.message.includes('unavailable')) {
              userMessage = 'Sorry, one or more items in this bundle are currently sold out.';
            } else if (error.message.includes('invalid') || error.message.includes('not found')) {
              userMessage = 'Some bundle items are no longer available. Please contact support.';
            }
            
            alert(userMessage + ' Please try again or contact support.');
            
            // Re-enable buttons
            submitButtons.forEach(function(btn, index) {
              btn.disabled = false;
              if (btn.textContent) {
                btn.textContent = originalTexts[index];
              } else {
                btn.value = originalTexts[index];
              }
            });
          });
        }
        
        function triggerCartUpdateEvents() {
          // Trigger various cart update events that cart apps might listen for
          
          // Standard Shopify cart update event
          document.dispatchEvent(new CustomEvent('cart:updated'));
          
          // jQuery events (if jQuery is available)
          if (typeof jQuery !== 'undefined') {
            jQuery(document).trigger('cart.requestComplete');
            jQuery(document).trigger('cartUpdated');
          }
          
          // Corner Cart specific events
          document.dispatchEvent(new CustomEvent('cornerCart:update'));
          document.dispatchEvent(new CustomEvent('cart:build'));
          
          // Generic cart events
          window.dispatchEvent(new Event('cartChanged'));
          document.dispatchEvent(new CustomEvent('cart:change'));
          
          // Refresh cart drawer/sidebar if it exists
          const cartDrawer = document.querySelector('[data-cart-drawer], .cart-drawer, #cart-drawer');
          if (cartDrawer) {
            cartDrawer.dispatchEvent(new CustomEvent('refresh'));
          }
          
          // Update cart count if elements exist
          const cartCountElements = document.querySelectorAll('[data-cart-count], .cart-count, .cart-item-count');
          if (cartCountElements.length > 0) {
            // Fetch updated cart to get new count
            fetch('/cart.js')
              .then(response => response.json())
              .then(cart => {
                cartCountElements.forEach(element => {
                  element.textContent = cart.item_count;
                });
              })
              .catch(error => console.log('Could not update cart count:', error));
          }
          
          console.log('Cart update events triggered for cart apps');
        }
        
        // Override all add to cart mechanisms
        function overrideCartMechanisms() {
          // Override form submissions
          const forms = document.querySelectorAll('form[action*="/cart/add"], form[action="/cart/add"]');
          forms.forEach(function(form) {
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            newForm.addEventListener('submit', handleBundleCartSubmit);
          });
          
          // Override button clicks
          const buttons = document.querySelectorAll('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]');
          buttons.forEach(function(button) {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            newButton.addEventListener('click', handleBundleCartSubmit);
          });
          
          // Global click handler as fallback
          document.addEventListener('click', function(e) {
            const target = e.target;
            if (target.matches('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]') ||
                target.closest('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]')) {
              handleBundleCartSubmit(e);
            }
          }, true);
        }
        
        // Apply overrides with delays
        setTimeout(overrideCartMechanisms, 500);
        setTimeout(overrideCartMechanisms, 2000);
        setInterval(overrideCartMechanisms, 5000);
        
        console.log('Native cart integration setup complete');
      }
      
      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initBundleComponents);
      } else {
        initBundleComponents();
      }
    })();
  </script>
{% endif %}

{% schema %}
{
  "name": "Bundle Components",
  "settings": [],
  "presets": [
    {
      "name": "Bundle Components"
    }
  ]
}
{% endschema %}
