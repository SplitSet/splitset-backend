{% comment %}
  Bundle Components Display Section - Final Version
  Simple display with title/price and fail-proof cart mechanism
{% endcomment %}

{% if product.metafields.bundle_app.is_bundle %}
  <style>
    /* Bundle components styling - simplified */
    .bundle-components-wrapper {
      margin: 20px 0;
      position: relative;
      z-index: 10;
    }
    
    .bundle-product-container {
      display: flex;
      align-items: flex-start;
      gap: 20px;
      margin-bottom: 15px;
      padding: 15px;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #fafafa;
    }
    
    .bundle-product-image {
      width: 80px;
      height: 80px;
      border-radius: 8px;
      overflow: hidden;
      flex-shrink: 0;
      border: 1px solid #ddd;
    }
    
    .bundle-product-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .bundle-product-info {
      flex-grow: 1;
    }
    
    .bundle-product-title {
      font-size: 16px;
      font-weight: 600;
      color: #333;
      margin-bottom: 8px;
      line-height: 1.4;
    }
    
    .bundle-product-price {
      font-size: 14px;
      color: #666;
      font-weight: 500;
    }
    
    /* Hide original variant selector when bundle is active */
    .bundle-active .product-form__input {
      display: none !important;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .bundle-product-container {
        flex-direction: column;
        gap: 15px;
      }
      
      .bundle-product-image {
        width: 60px;
        height: 60px;
        align-self: center;
      }
    }
  </style>
  
  <!-- Direct HTML rendering for immediate display -->
  {% if product.id == 8157894312130 %}
    <div class="bundle-components-wrapper" id="bundle-components-display" data-product-id="{{ product.id }}">
      <!-- White Chikan Top -->
      <div class="bundle-product-container" data-component-id="8157903552706" data-component-index="0">
        <div class="bundle-product-image">
          <img src="https://cdn.shopify.com/s/files/1/0520/2355/8338/files/CurlyTales-White-Chikan-Set-1.jpg?v=1742154098" alt="White Chikan Top" loading="lazy">
        </div>
        <div class="bundle-product-info">
          <div class="bundle-product-title">White Chikan Top</div>
          <div class="bundle-product-price">Rs. 2,400.00</div>
        </div>
      </div>
      
      <!-- White Chikan Bottom -->
      <div class="bundle-product-container" data-component-id="8157903716546" data-component-index="1">
        <div class="bundle-product-image">
          <img src="https://cdn.shopify.com/s/files/1/0520/2355/8338/files/CurlyTales-White-Chikan-Set-2.jpg?v=1742154100" alt="White Chikan Bottom" loading="lazy">
        </div>
        <div class="bundle-product-info">
          <div class="bundle-product-title">White Chikan Bottom</div>
          <div class="bundle-product-price">Rs. 2,400.00</div>
        </div>
      </div>
    </div>
  {% endif %}
  
  <script>
    (function() {
      const PRODUCT_ID = {{ product.id }};
      
      console.log('Bundle section loaded for product:', PRODUCT_ID);
      
      // Fail-proof variant mapping for CurlyTales product
      const CURLYTALES_VARIANTS = {
        'S': { top: 44032498516162, bottom: 44032498843842 },
        'M': { top: 44032498548930, bottom: 44032498876610 },
        'L': { top: 44032498581698, bottom: 44032498909378 },
        'XL': { top: 44032498614466, bottom: 44032498942146 },
        'XXL': { top: 44032498647234, bottom: 44032498974914 }
      };
      
      // Debina Bonnerjee variants (for other products)
      const DEBINA_VARIANTS = {
        'XS': { top: 44032498516162, bottom: 44032498843842 },
        'S': { top: 44032498548930, bottom: 44032498876610 },
        'M': { top: 44032498581698, bottom: 44032498909378 },
        'L': { top: 44032498614466, bottom: 44032498942146 },
        'XL': { top: 44032498647234, bottom: 44032498974914 },
        'XXL': { top: 44032498680002, bottom: 44032499007682 }
      };
      
      // Wait for DOM to be ready
      function initBundleComponents() {
        // Try to move bundle components to optimal position
        const bundleWrapper = document.getElementById('bundle-components-display');
        if (bundleWrapper) {
          moveBundleComponentsToTop(bundleWrapper);
        }
        
        // Add class to product form to hide original selectors
        const productForm = document.querySelector('.product__info');
        if (productForm) {
          productForm.classList.add('bundle-active');
        }
        
        // Setup fail-proof cart override
        setupFailProofCartOverride();
        
        console.log('Bundle components initialized for product', PRODUCT_ID);
      }
      
      function moveBundleComponentsToTop(bundleWrapper) {
        // Try multiple selectors to find insertion point
        const possibleTargets = [
          '[data-section-container]',
          '.product__info',
          '.product-form',
          'main[role="main"]',
          '#MainContent',
          '.main-content'
        ];
        
        let targetElement = null;
        for (let selector of possibleTargets) {
          targetElement = document.querySelector(selector);
          if (targetElement) {
            console.log('Found target element:', selector);
            break;
          }
        }
        
        if (targetElement) {
          bundleWrapper.remove();
          targetElement.parentNode.insertBefore(bundleWrapper, targetElement);
          console.log('Bundle components moved above target element');
        }
      }
      
      function getSelectedVariant() {
        // Multiple methods to detect selected variant
        let selectedSize = 'S'; // Default fallback
        
        // Method 1: Check active product option
        const activeOption = document.querySelector('.product-options__value.active');
        if (activeOption) {
          const dataValue = activeOption.getAttribute('data-value');
          const textContent = activeOption.textContent.trim();
          selectedSize = (dataValue || textContent).toUpperCase();
          console.log('Method 1 - Active option:', selectedSize);
          return selectedSize;
        }
        
        // Method 2: Check selected radio input
        const selectedInput = document.querySelector('input[name="id"]:checked');
        if (selectedInput) {
          // Try to find corresponding size from the form
          const form = selectedInput.closest('form');
          if (form) {
            const sizeOptions = form.querySelectorAll('.product-options__value');
            sizeOptions.forEach(function(option) {
              if (option.classList.contains('active')) {
                selectedSize = (option.getAttribute('data-value') || option.textContent.trim()).toUpperCase();
              }
            });
          }
          console.log('Method 2 - Radio input:', selectedSize);
          return selectedSize;
        }
        
        // Method 3: Check select dropdown
        const selectedSelect = document.querySelector('select[name="id"]');
        if (selectedSelect && selectedSelect.selectedOptions.length > 0) {
          const selectedOption = selectedSelect.selectedOptions[0];
          const optionText = selectedOption.textContent;
          // Extract size from option text (e.g., "S - Rs. 4,800.00")
          const sizeMatch = optionText.match(/^([A-Z]{1,3})/);
          if (sizeMatch) {
            selectedSize = sizeMatch[1];
          }
          console.log('Method 3 - Select dropdown:', selectedSize);
          return selectedSize;
        }
        
        // Method 4: Try to find from URL or other sources
        const urlParams = new URLSearchParams(window.location.search);
        const variantFromUrl = urlParams.get('variant');
        if (variantFromUrl) {
          // This would require mapping variant ID to size, using default for now
          console.log('Method 4 - URL variant found, using default');
        }
        
        console.log('Using default size:', selectedSize);
        return selectedSize;
      }
      
      function setupFailProofCartOverride() {
        // Override all possible add to cart mechanisms
        
        // Method 1: Override form submissions
        function overrideFormSubmissions() {
          const forms = document.querySelectorAll('form[action*="/cart/add"], form[action="/cart/add"]');
          forms.forEach(function(form) {
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            
            newForm.addEventListener('submit', handleBundleCartSubmit);
          });
        }
        
        // Method 2: Override button clicks
        function overrideButtonClicks() {
          const buttons = document.querySelectorAll('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]');
          buttons.forEach(function(button) {
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            
            newButton.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              handleBundleCartSubmit(e);
            });
          });
        }
        
        // Method 3: Override any cart-related clicks
        function overrideCartClicks() {
          document.addEventListener('click', function(e) {
            const target = e.target;
            if (target.matches('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]') ||
                target.closest('button[name="add"], input[type="submit"][name="add"], .product-form__submit, [data-add-to-cart]')) {
              e.preventDefault();
              e.stopPropagation();
              handleBundleCartSubmit(e);
            }
          }, true); // Use capture phase
        }
        
        function handleBundleCartSubmit(e) {
          e.preventDefault();
          e.stopPropagation();
          
          console.log('Bundle cart submit triggered');
          
          // Get selected size
          const selectedSize = getSelectedVariant();
          console.log('Selected size for cart:', selectedSize);
          
          // Get variant mapping based on product
          let variantMap;
          if (PRODUCT_ID === 8157894312130) {
            variantMap = CURLYTALES_VARIANTS;
          } else if (PRODUCT_ID === 7698929287362) {
            variantMap = DEBINA_VARIANTS;
          } else {
            console.error('Unknown product ID for bundle:', PRODUCT_ID);
            return;
          }
          
          // Get variant IDs
          const variants = variantMap[selectedSize];
          if (!variants) {
            console.error('No variants found for size:', selectedSize);
            alert('Please select a valid size');
            return;
          }
          
          // Build cart items
          const items = [
            {
              id: parseInt(variants.top),
              quantity: 1,
              properties: {
                '_bundle_product': 'true',
                '_bundle_id': PRODUCT_ID.toString(),
                '_bundle_component': 'Top',
                '_bundle_size': selectedSize
              }
            },
            {
              id: parseInt(variants.bottom),
              quantity: 1,
              properties: {
                '_bundle_product': 'true',
                '_bundle_id': PRODUCT_ID.toString(),
                '_bundle_component': 'Bottom',
                '_bundle_size': selectedSize
              }
            }
          ];
          
          console.log('Adding items to cart:', items);
          
          // Disable all submit buttons
          const submitButtons = document.querySelectorAll('button[name="add"], input[type="submit"][name="add"], .product-form__submit');
          const originalTexts = [];
          submitButtons.forEach(function(btn, index) {
            originalTexts[index] = btn.textContent || btn.value;
            btn.disabled = true;
            if (btn.textContent) {
              btn.textContent = 'Adding...';
            } else {
              btn.value = 'Adding...';
            }
          });
          
          // Add to cart via fetch
          fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ items: items })
          })
          .then(function(response) {
            console.log('Cart response status:', response.status);
            if (!response.ok) {
              throw new Error('Cart request failed with status: ' + response.status);
            }
            return response.json();
          })
          .then(function(data) {
            console.log('Successfully added to cart:', data);
            // Redirect to cart
            window.location.href = '/cart';
          })
          .catch(function(error) {
            console.error('Cart error:', error);
            alert('Failed to add bundle to cart: ' + error.message + '. Please try again.');
            
            // Re-enable buttons
            submitButtons.forEach(function(btn, index) {
              btn.disabled = false;
              if (btn.textContent) {
                btn.textContent = originalTexts[index];
              } else {
                btn.value = originalTexts[index];
              }
            });
          });
        }
        
        // Apply all override methods
        setTimeout(function() {
          overrideFormSubmissions();
          overrideButtonClicks();
          overrideCartClicks();
          console.log('All cart override methods applied');
        }, 500);
        
        // Reapply periodically to catch dynamically added elements
        setInterval(function() {
          overrideFormSubmissions();
          overrideButtonClicks();
        }, 2000);
      }
      
      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initBundleComponents);
      } else {
        initBundleComponents();
      }
    })();
  </script>
{% endif %}

{% schema %}
{
  "name": "Bundle Components",
  "settings": [],
  "presets": [
    {
      "name": "Bundle Components"
    }
  ]
}
{% endschema %}
